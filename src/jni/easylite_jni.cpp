/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <easylite_engine.h>
#include <exception/easylite_exceptio.h>
#include <sstream>

#ifdef __cplusplus
extern "C" {
#endif


#if defined(ANDROID)
#include <android/log.h>
#endif

#define TAG "EasyLiteJniSo"
#if !(defined(LOGD) || defined(LOGI) || defined(LOGW) || defined(LOGE))
# if defined(ANDROID) && defined(USE_ANDROID_LOGGING)
#  include <android/log.h>
#  define PERF_TESTS_LOG_TAG "OpenCV_perf"
#  define LOGD(...) ((void)__android_log_print(ANDROID_LOG_DEBUG, TAG, __VA_ARGS__))
#  define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, TAG, __VA_ARGS__))
#  define LOGW(...) ((void)__android_log_print(ANDROID_LOG_WARN, TAG, __VA_ARGS__))
#  define LOGE(...) ((void)__android_log_print(ANDROID_LOG_ERROR, TAG, __VA_ARGS__))
# else
#  define LOGD(_str, ...) do{printf(_str , ## __VA_ARGS__); printf("\n");fflush(stdout);} while(0)
#  define LOGI(_str, ...) do{printf(_str , ## __VA_ARGS__); printf("\n");fflush(stdout);} while(0)
#  define LOGW(_str, ...) do{printf(_str , ## __VA_ARGS__); printf("\n");fflush(stdout);} while(0)
#  define LOGE(_str, ...) do{printf(_str , ## __VA_ARGS__); printf("\n");fflush(stdout);} while(0)
# endif
#endif


static jstring stoJstring(JNIEnv* env, const char* pat)
{
    jclass strClass = env->FindClass("java/lang/String");
    jmethodID ctorID = env->GetMethodID(strClass, "<init>", "([BLjava/lang/String;)V");
    jbyteArray bytes = env->NewByteArray(strlen(pat));
    env->SetByteArrayRegion(bytes, 0, strlen(pat), (jbyte*)pat);
    jstring encoding = env->NewStringUTF("utf-8");
    jstring ret =  (jstring)env->NewObject(strClass, ctorID, bytes, encoding);
    env->DeleteLocalRef(strClass);
    env->DeleteLocalRef(bytes);
    env->DeleteLocalRef(encoding);
    return ret;
}

static void JNIThrowEasyLiteException(JNIEnv *env, const char *msg, const int code)
{
    // 查找异常类
    jclass cls = env->FindClass("com/jkk/exception/EasyLiteException");
    jmethodID dfexf_init = env->GetMethodID(cls,"<init>", "(Ljava/lang/String;I)V");

    jstring jmsg = stoJstring(env, msg);
    jobject dfexf_obj = env->NewObject(cls, dfexf_init, jmsg, code);

    /* 如果这个异常类没有找到，VM会抛出一个NowClassDefFoundError异常 */
    if (cls != NULL) {
        env->DeleteLocalRef(cls);
        env->Throw((jthrowable)dfexf_obj);  // 抛出指定名字的异常
    }
    /* 释放局部引用 */
}


static EasyLite* easyDB = nullptr;


/*
 * Class:     com_jkk_EasyLite
 * Method:    initLoad
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_com_jkk_EasyLite_initLoad
        (JNIEnv *env, jobject thiz){
    LOGD("EasyLite init...");
    //如果已初始化则直接返回
    if (easyDB != nullptr) {
        LOGD("EasyLite has been initialize");
        return true;
    }
    jboolean tRet = false;

    try {
        easyDB = new EasyLiteEngine();
    }catch (EasyLiteException dfex){
        LOGE("DFaceDB Init Exception, code:%d, msg:%s", dfex.getCode(), dfex.getMsg());
        JNIThrowEasyLiteException(env, dfex.getMsg(), dfex.getCode());
        return false;
    }

    tRet = true;
    return tRet;
}

/*
 * Class:     com_jkk_EasyLite
 * Method:    uninitLoad
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_com_jkk_EasyLite_uninitLoad
        (JNIEnv *env, jobject thiz){
    delete easyDB;
    return true;
}

/*
 * Class:     com_jkk_EasyLite
 * Method:    openDB
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_com_jkk_EasyLite_openDB
        (JNIEnv *env, jobject thiz, jstring db_path){
    const char *modelPath = env->GetStringUTFChars(db_path, 0);
    string tFaceModelDir = modelPath;
    try {
        easyDB->openDB(tFaceModelDir);
    }catch (EasyLiteException dfex){
        LOGE("EasyLite open database exception, code:%d, msg:%s", dfex.getCode(), dfex.getMsg());
        JNIThrowEasyLiteException(env, dfex.getMsg(), dfex.getCode());
        return false;
    }

    env->ReleaseStringUTFChars(db_path, modelPath);
    return true;
}

/*
 * Class:     com_jkk_EasyLite
 * Method:    closeDB
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_com_jkk_EasyLite_closeDB
        (JNIEnv *env, jobject thiz){
    bool ret = false;
    try {
        ret = easyDB->closeDB();
    }catch (EasyLiteException dfex){
        LOGE("DFaceDB close database exception, code:%d, msg:%s", dfex.getCode(), dfex.getMsg());
        JNIThrowEasyLiteException(env, dfex.getMsg(), dfex.getCode());
        return false;
    }
    return ret;
}

/*
 * Class:     com_jkk_EasyLite
 * Method:    dbExsitCollection
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_com_jkk_EasyLite_dbExsitCollection
        (JNIEnv *env, jobject thiz, jstring collection_name){
    const char *modelPath = env->GetStringUTFChars(collection_name, 0);
    string tFaceModelDir = modelPath;
    bool ret = false;
    try {
        ret =  easyDB->dbExsitCollection(tFaceModelDir);
    }catch (EasyLiteException dfex){
        env->ReleaseStringUTFChars(collection_name, modelPath);
        LOGE("DFaceDB check exsit collection exception, code:%d, msg:%s", dfex.getCode(), dfex.getMsg());
        JNIThrowEasyLiteException(env, dfex.getMsg(), dfex.getCode());
        return false;
    }
    env->ReleaseStringUTFChars(collection_name, modelPath);
    return ret;
}

/*
 * Class:     com_jkk_EasyLite
 * Method:    dbCreateCollection
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_com_jkk_EasyLite_dbCreateCollection
        (JNIEnv *env, jobject thiz, jstring collection_name){
    const char *faceDetectionModelPath = env->GetStringUTFChars(collection_name, 0);
    string tFaceModelDir = faceDetectionModelPath;
//    return dfaceDB->dbCreateCollection(tFaceModelDir);
    bool ret = false;
    try {
        ret =  easyDB->dbCreateCollection(tFaceModelDir);
    }catch (EasyLiteException dfex){
        env->ReleaseStringUTFChars(collection_name, faceDetectionModelPath);
        LOGE("DFaceDB create collection exception, code:%d, msg:%s", dfex.getCode(), dfex.getMsg());
        JNIThrowEasyLiteException(env, dfex.getMsg(), dfex.getCode());
        return false;
    }
    env->ReleaseStringUTFChars(collection_name, faceDetectionModelPath);
    return ret;
}


/*
 * Class:     com_jkk_EasyLite
 * Method:    totalCollectionRecord
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_jkk_EasyLite_totalCollectionRecord
        (JNIEnv *env, jobject thiz, jstring collection_name){
    const char *c_coll_str = env->GetStringUTFChars(collection_name, 0);
//    int ret = dfaceDB->totalCollectionRecord(std::string(c_coll_str));
    int ret = 0;
    try {
        ret = easyDB->totalCollectionRecord(std::string(c_coll_str));
    }catch (EasyLiteException dfex){
        env->ReleaseStringUTFChars(collection_name, c_coll_str);
        LOGE("EasyLite total collection record exception, code:%d, msg:%s", dfex.getCode(), dfex.getMsg());
        JNIThrowEasyLiteException(env, dfex.getMsg(), dfex.getCode());
        return 0;
    }
    env->ReleaseStringUTFChars(collection_name, c_coll_str);
    return ret;
}

/*
 * Class:     com_jkk_EasyLite
 * Method:    insert
 * Signature: (Ljava/lang/String;Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_jkk_EasyLite_insert
        (JNIEnv *env, jobject thiz, jstring collection_name, jstring json_str){
    const char *c_coll_str = env->GetStringUTFChars(collection_name, 0);

    if(json_str == NULL){
        return -1;
    }

    const char *c_json_str = env->GetStringUTFChars(json_str, 0);

    int retc = -1;
    try {
        retc = easyDB->insert(std::string(c_coll_str), std::string(c_json_str));
    }catch (EasyLiteException dfex){
        env->ReleaseStringUTFChars(collection_name, c_coll_str);
        env->ReleaseStringUTFChars(json_str, c_json_str);
        LOGE("EasyLite insert record exception, code:%d, msg:%s", dfex.getCode(), dfex.getMsg());
        JNIThrowEasyLiteException(env, dfex.getMsg(), dfex.getCode());
        return -1;
    }

    env->ReleaseStringUTFChars(collection_name, c_coll_str);
    env->ReleaseStringUTFChars(json_str, c_json_str);
    return retc;
}


JNIEXPORT jboolean JNICALL Java_com_jkk_EasyLite_update
        (JNIEnv *env, jobject thiz, jstring collection_name, jint id, jstring json_str){
    const char *c_coll_str = env->GetStringUTFChars(collection_name, 0);

    if(json_str == NULL){
        return -1;
    }

    const char *c_json_str = env->GetStringUTFChars(json_str, 0);
//    int retc = dfaceDB->insert(std::string(c_coll_str), std::string(c_json_str));

    jboolean ret = false;
    try {
        ret = easyDB->update(std::string(c_coll_str), id, std::string(c_json_str));
    }catch (EasyLiteException dfex){
        env->ReleaseStringUTFChars(collection_name, c_coll_str);
        env->ReleaseStringUTFChars(json_str, c_json_str);
        LOGE("EasyLite insert record exception, code:%d, msg:%s", dfex.getCode(), dfex.getMsg());
        JNIThrowEasyLiteException(env, dfex.getMsg(), dfex.getCode());
        return false;
    }

    env->ReleaseStringUTFChars(collection_name, c_coll_str);
    env->ReleaseStringUTFChars(json_str, c_json_str);
    return ret;
}



/*
 * Class:     com_jkk_EasyLite
 * Method:    fetchById
 * Signature: (Ljava/lang/String;I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_jkk_EasyLite_fetchById
        (JNIEnv *env, jobject thiz, jstring collection_name, jint id){
    const char *c_coll_str = env->GetStringUTFChars(collection_name, 0);
    std::string out_json;
//    dfaceDB->fetchById(std::string(c_coll_str), id, out_json);

    try {
        easyDB->fetchById(std::string(c_coll_str), id, out_json);
    }catch (EasyLiteException dfex){
        env->ReleaseStringUTFChars(collection_name, c_coll_str);
        LOGE("EasyLite fetch by id exception, code:%d, msg:%s", dfex.getCode(), dfex.getMsg());
        JNIThrowEasyLiteException(env, dfex.getMsg(), dfex.getCode());
        return NULL;
    }

    env->ReleaseStringUTFChars(collection_name, c_coll_str);
    if(out_json.empty()){
        return NULL;
    }
    jstring ret_json = stoJstring(env, out_json.c_str());
    return ret_json;
}

/*
 * Class:     com_jkk_EasyLite
 * Method:    deleteById
 * Signature: (Ljava/lang/String;I)Z
 */
JNIEXPORT jboolean JNICALL Java_com_jkk_EasyLite_deleteById
        (JNIEnv *env, jobject thiz, jstring collection_name, jint id){
    const char *c_coll_str = env->GetStringUTFChars(collection_name, 0);
//    bool ret = dfaceDB->deleteById(std::string(c_coll_str), id);
    bool ret = false;
    try {
        ret = easyDB->deleteById(std::string(c_coll_str), id);
    }catch (EasyLiteException dfex){
        env->ReleaseStringUTFChars(collection_name, c_coll_str);
        LOGE("EasyLite fetch by id exception, code:%d, msg:%s", dfex.getCode(), dfex.getMsg());
        JNIThrowEasyLiteException(env, dfex.getMsg(), dfex.getCode());
        return false;
    }
    env->ReleaseStringUTFChars(collection_name, c_coll_str);
    return ret;
}

/*
 * Class:     com_jkk_EasyLite
 * Method:    fetchAll
 * Signature: (Ljava/lang/String;Ljava/lang/String;)Ljava/util/List;
 */
JNIEXPORT jobject JNICALL Java_com_jkk_EasyLite_fetchAll
        (JNIEnv *env, jobject thiz, jstring collection_name, jstring condition_str){
    const char *c_coll_str = env->GetStringUTFChars(collection_name, 0);
//    const char *c_condition_str = env->GetStringUTFChars(condition_str, 0);
    stringstream stt;
    if(condition_str == NULL){
        stt << "";
    }else{
        const char *c_condition_tmp = env->GetStringUTFChars(condition_str, 0);
        stt << c_condition_tmp;
        env->ReleaseStringUTFChars(condition_str, c_condition_tmp);
    }
    std::vector<std::string> out_json_strs;

    try {
        easyDB->fetchAll(std::string(c_coll_str), out_json_strs, stt.str());
    }catch (EasyLiteException dfex){
        env->ReleaseStringUTFChars(collection_name, c_coll_str);
        LOGE("EasyLite fetch all exception, code:%d, msg:%s", dfex.getCode(), dfex.getMsg());
        JNIThrowEasyLiteException(env, dfex.getMsg(), dfex.getCode());
        return NULL;
    }

    jclass list_cls = env->FindClass("java/util/ArrayList");
    jmethodID list_costruct = env->GetMethodID(list_cls , "<init>","()V");
    jmethodID list_add  = env->GetMethodID(list_cls,"add","(Ljava/lang/Object;)Z");
    jobject list_obj = env->NewObject(list_cls , list_costruct);

    for(int i=0; i<out_json_strs.size(); ++i){
        jstring str_item = stoJstring(env, out_json_strs[i].c_str());
        env->CallBooleanMethod(list_obj , list_add , str_item);
        env->DeleteLocalRef(str_item);
    }

    env->ReleaseStringUTFChars(collection_name, c_coll_str);
    env->DeleteLocalRef(list_cls);
    return list_obj;
}



JNIEXPORT jboolean JNICALL Java_com_jkk_EasyLite_kvStore
        (JNIEnv *env, jobject thiz, jstring key, jstring value){
    const char *c_key_str = env->GetStringUTFChars(key, 0);
    const char *c_value_str = env->GetStringUTFChars(value, 0);

    jboolean ret = false;
    try {
        ret = easyDB->kv_store(std::string(c_key_str), std::string(c_value_str));
    }catch (EasyLiteException dfex){
        env->ReleaseStringUTFChars(key, c_key_str);
        env->ReleaseStringUTFChars(value, c_value_str);
        LOGE("EasyLite kvStore exception, code:%d, msg:%s", dfex.getCode(), dfex.getMsg());
        JNIThrowEasyLiteException(env, dfex.getMsg(), dfex.getCode());
        return false;
    }
    env->ReleaseStringUTFChars(key, c_key_str);
    env->ReleaseStringUTFChars(value, c_value_str);
    return ret;
}


JNIEXPORT jstring JNICALL Java_com_jkk_EasyLite_kvFetch
        (JNIEnv *env, jobject thiz, jstring key){
    const char *c_key_str = env->GetStringUTFChars(key, 0);
    std::string out_val;
    jboolean ret = false;
    try {
        ret = easyDB->kv_fetch(std::string(c_key_str), out_val);
    }catch (EasyLiteException dfex){
        env->ReleaseStringUTFChars(key, c_key_str);
        LOGE("DFaceDB kvFetch exception, code:%d, msg:%s", dfex.getCode(), dfex.getMsg());
        JNIThrowEasyLiteException(env, dfex.getMsg(), dfex.getCode());
        return NULL;
    }
    if(!ret){
        return NULL;
    }
    env->ReleaseStringUTFChars(key, c_key_str);
    jstring ret_val_s = stoJstring(env, out_val.c_str());
    return ret_val_s;
}


JNIEXPORT jboolean JNICALL Java_com_jkk_EasyLite_kvDelete
        (JNIEnv *env, jobject thiz, jstring key){
    const char *c_key_str = env->GetStringUTFChars(key, 0);

    jboolean ret = false;
    try {
        ret = easyDB->kv_delete(std::string(c_key_str));
    }catch (EasyLiteException dfex){
        env->ReleaseStringUTFChars(key, c_key_str);
        LOGE("EasyLite kvDelete exception, code:%d, msg:%s", dfex.getCode(), dfex.getMsg());
        JNIThrowEasyLiteException(env, dfex.getMsg(), dfex.getCode());
        return false;
    }
    env->ReleaseStringUTFChars(key, c_key_str);
    return ret;
}





#ifdef __cplusplus
}
#endif
